Tietorakenteet harjoitustyö 2014: 'Pistepeli'Eeva NikkariIdeana on toteuttaa 'pistepeli' ja algoritmi, joka 'pelaa' sitä. Toteutetaan siis suunnattu verkko, jonka solmut on pisteytetty positiivisilla kokonaisluvuilla.Pelissä kuljetaan solmusta solmuun ja yritetään saada mahdollisimman paljon pisteitä. Pistesaldoon lisätään siis aina käydyn solmun pisteet.  Jo kerran käydyssä solmussa ei saa käydä uudestaan.

Ongelma palaa painotettuihin verkkoihin, sillä voimme ajatella kaaren painon olevan sen solmun pistemäärä, mihin se osoittaa. Ongelmana on siis löytää painavin yksinkertainen polku verkossa.Ongelmalle ei taida olla tehokasta algoritmia, jolla saataisiin aina maksimipistemäärä. Toteutetaan siis 'tyhmempi' algoritmi DFS:llä, joka kuitenkin yrittää optimoida voiton.Ideana on, että Algoritmi käy DFS:llä läpi verkon. Talletetaan taulukkoon algoritmin saamat pistemäärät kussakin käydyssä solmussa, niin että algoritmin tultua umpikujaan osataan laskea uuden reitin pisteet oikein. Säilytetään myös tietoa sen hetkisestä parhaasta umpikujassa saadusta pistemäärästä. Optimoidaan algoritmia siten, että se valitsee viereisistä solmuista seuraavaksi sen, jossa on eniten pisteitä. Kun koko verkko on käyty läpi palautetaan parhaat pisteet. Tätä varten linkitetty lista kannattaa tehdä siten, että se linkittää solmut jo valmiiksi suuruusjärjestyksessä.

Olisi myös fiksua toteuttaa algoritmi siten, että sen tultua ’umpikujaan’, se kuitenkin tunnistaisi, jos se saisi jatkaa jonkin toisen haaran jo läpikäymään alueeseen. Jos Algoritmin pitää kirjaa kulkemastaan reitistä niin tämä on toteutettavissa. Itse reitin ylläpitäminen saattaa vaatia uusia tietorakenteita ja aiheuttaa hankaluuksia, joten otetaan se toteutukseen jos aika sallii.Pitää siis toteuttaa ainakin verkko, solmut, linkitetty lista, sekä itse algoritmi, joka pelaa pistepeliä. Aikavaativuuden tavoite on DFS:n aikavaativuus eli O(|E|+|V|) ja tilavaativuuden O(|V|). Nämä arviot muuttuvat luultavasti työn aikana, kun muiden tietorakenteiden aikavaativuudet selkenevät.Voisi olla myös hauskaa toteuttaa eri tavalla toimivia algoritmeja ja pistää niitä kilpailemaan keskenään, mutta yksi algoritmi saa nyt riittää tässä työssä :)